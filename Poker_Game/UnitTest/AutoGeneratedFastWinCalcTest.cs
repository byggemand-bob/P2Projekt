using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Poker_Game.Game;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UnitTest
{
    [TestClass]
    class AutoGeneratedFastWinCalcTest
    {
        FastWinCalc _winCalc = new FastWinCalc();

        //All test's was autogenerated
        
        [TestMethod]
        public void FastWinCalcTest1()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)6);
            Card tableCard2 = new Card((Suit)3, (Rank)5);
            Card tableCard3 = new Card((Suit)2, (Rank)13);
            Card tableCard4 = new Card((Suit)1, (Rank)2);
            Card tableCard5 = new Card((Suit)3, (Rank)13);

            player1Cards.Add(new Card((Suit)2, (Rank)8));
            player1Cards.Add(new Card((Suit)0, (Rank)3));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)7));
            player2Cards.Add(new Card((Suit)1, (Rank)13));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest2()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)12);
            Card tableCard2 = new Card((Suit)3, (Rank)6);
            Card tableCard3 = new Card((Suit)1, (Rank)13);
            Card tableCard4 = new Card((Suit)2, (Rank)8);
            Card tableCard5 = new Card((Suit)1, (Rank)10);

            player1Cards.Add(new Card((Suit)0, (Rank)14));
            player1Cards.Add(new Card((Suit)3, (Rank)13));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)6));
            player2Cards.Add(new Card((Suit)3, (Rank)8));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest3()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)3);
            Card tableCard2 = new Card((Suit)1, (Rank)4);
            Card tableCard3 = new Card((Suit)0, (Rank)3);
            Card tableCard4 = new Card((Suit)2, (Rank)2);
            Card tableCard5 = new Card((Suit)3, (Rank)12);

            player1Cards.Add(new Card((Suit)1, (Rank)13));
            player1Cards.Add(new Card((Suit)3, (Rank)7));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)11));
            player2Cards.Add(new Card((Suit)0, (Rank)13));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest4()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)7);
            Card tableCard2 = new Card((Suit)1, (Rank)14);
            Card tableCard3 = new Card((Suit)1, (Rank)6);
            Card tableCard4 = new Card((Suit)1, (Rank)5);
            Card tableCard5 = new Card((Suit)0, (Rank)6);

            player1Cards.Add(new Card((Suit)0, (Rank)14));
            player1Cards.Add(new Card((Suit)1, (Rank)13));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)8));
            player2Cards.Add(new Card((Suit)1, (Rank)7));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest5()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)11);
            Card tableCard2 = new Card((Suit)1, (Rank)4);
            Card tableCard3 = new Card((Suit)3, (Rank)8);
            Card tableCard4 = new Card((Suit)0, (Rank)2);
            Card tableCard5 = new Card((Suit)3, (Rank)12);

            player1Cards.Add(new Card((Suit)3, (Rank)6));
            player1Cards.Add(new Card((Suit)1, (Rank)7));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)13));
            player2Cards.Add(new Card((Suit)1, (Rank)14));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest6()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)13);
            Card tableCard2 = new Card((Suit)1, (Rank)13);
            Card tableCard3 = new Card((Suit)2, (Rank)12);
            Card tableCard4 = new Card((Suit)1, (Rank)9);
            Card tableCard5 = new Card((Suit)0, (Rank)11);

            player1Cards.Add(new Card((Suit)1, (Rank)6));
            player1Cards.Add(new Card((Suit)0, (Rank)4));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)5));
            player2Cards.Add(new Card((Suit)2, (Rank)10));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest7()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)9);
            Card tableCard2 = new Card((Suit)3, (Rank)13);
            Card tableCard3 = new Card((Suit)1, (Rank)7);
            Card tableCard4 = new Card((Suit)2, (Rank)4);
            Card tableCard5 = new Card((Suit)0, (Rank)6);

            player1Cards.Add(new Card((Suit)0, (Rank)10));
            player1Cards.Add(new Card((Suit)1, (Rank)8));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)10));
            player2Cards.Add(new Card((Suit)1, (Rank)13));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest8()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)13);
            Card tableCard2 = new Card((Suit)1, (Rank)8);
            Card tableCard3 = new Card((Suit)0, (Rank)14);
            Card tableCard4 = new Card((Suit)3, (Rank)13);
            Card tableCard5 = new Card((Suit)2, (Rank)5);

            player1Cards.Add(new Card((Suit)1, (Rank)9));
            player1Cards.Add(new Card((Suit)3, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)3));
            player2Cards.Add(new Card((Suit)3, (Rank)8));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest9()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)2);
            Card tableCard2 = new Card((Suit)3, (Rank)3);
            Card tableCard3 = new Card((Suit)1, (Rank)6);
            Card tableCard4 = new Card((Suit)1, (Rank)5);
            Card tableCard5 = new Card((Suit)0, (Rank)10);

            player1Cards.Add(new Card((Suit)0, (Rank)8));
            player1Cards.Add(new Card((Suit)2, (Rank)8));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)5));
            player2Cards.Add(new Card((Suit)2, (Rank)9));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest10()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)6);
            Card tableCard2 = new Card((Suit)1, (Rank)7);
            Card tableCard3 = new Card((Suit)3, (Rank)11);
            Card tableCard4 = new Card((Suit)1, (Rank)3);
            Card tableCard5 = new Card((Suit)1, (Rank)2);

            player1Cards.Add(new Card((Suit)2, (Rank)10));
            player1Cards.Add(new Card((Suit)1, (Rank)9));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)14));
            player2Cards.Add(new Card((Suit)0, (Rank)14));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest11()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)3);
            Card tableCard2 = new Card((Suit)3, (Rank)5);
            Card tableCard3 = new Card((Suit)2, (Rank)10);
            Card tableCard4 = new Card((Suit)1, (Rank)2);
            Card tableCard5 = new Card((Suit)0, (Rank)2);

            player1Cards.Add(new Card((Suit)0, (Rank)13));
            player1Cards.Add(new Card((Suit)0, (Rank)12));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)3));
            player2Cards.Add(new Card((Suit)2, (Rank)4));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest12()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)14);
            Card tableCard2 = new Card((Suit)3, (Rank)8);
            Card tableCard3 = new Card((Suit)3, (Rank)13);
            Card tableCard4 = new Card((Suit)1, (Rank)2);
            Card tableCard5 = new Card((Suit)0, (Rank)2);

            player1Cards.Add(new Card((Suit)0, (Rank)13));
            player1Cards.Add(new Card((Suit)3, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)6));
            player2Cards.Add(new Card((Suit)2, (Rank)12));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest13()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)8);
            Card tableCard2 = new Card((Suit)3, (Rank)10);
            Card tableCard3 = new Card((Suit)1, (Rank)5);
            Card tableCard4 = new Card((Suit)3, (Rank)14);
            Card tableCard5 = new Card((Suit)3, (Rank)12);

            player1Cards.Add(new Card((Suit)2, (Rank)4));
            player1Cards.Add(new Card((Suit)1, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)8));
            player2Cards.Add(new Card((Suit)0, (Rank)4));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest14()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)4);
            Card tableCard2 = new Card((Suit)2, (Rank)2);
            Card tableCard3 = new Card((Suit)0, (Rank)2);
            Card tableCard4 = new Card((Suit)2, (Rank)10);
            Card tableCard5 = new Card((Suit)2, (Rank)6);

            player1Cards.Add(new Card((Suit)0, (Rank)14));
            player1Cards.Add(new Card((Suit)0, (Rank)9));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)5));
            player2Cards.Add(new Card((Suit)0, (Rank)10));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest15()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)4);
            Card tableCard2 = new Card((Suit)0, (Rank)5);
            Card tableCard3 = new Card((Suit)3, (Rank)10);
            Card tableCard4 = new Card((Suit)2, (Rank)10);
            Card tableCard5 = new Card((Suit)3, (Rank)9);

            player1Cards.Add(new Card((Suit)0, (Rank)11));
            player1Cards.Add(new Card((Suit)3, (Rank)2));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)3));
            player2Cards.Add(new Card((Suit)3, (Rank)3));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest16()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)8);
            Card tableCard2 = new Card((Suit)1, (Rank)7);
            Card tableCard3 = new Card((Suit)0, (Rank)13);
            Card tableCard4 = new Card((Suit)3, (Rank)13);
            Card tableCard5 = new Card((Suit)0, (Rank)5);

            player1Cards.Add(new Card((Suit)0, (Rank)14));
            player1Cards.Add(new Card((Suit)2, (Rank)14));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)14));
            player2Cards.Add(new Card((Suit)3, (Rank)12));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest17()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)5);
            Card tableCard2 = new Card((Suit)2, (Rank)10);
            Card tableCard3 = new Card((Suit)3, (Rank)14);
            Card tableCard4 = new Card((Suit)3, (Rank)3);
            Card tableCard5 = new Card((Suit)0, (Rank)9);

            player1Cards.Add(new Card((Suit)3, (Rank)11));
            player1Cards.Add(new Card((Suit)3, (Rank)6));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)11));
            player2Cards.Add(new Card((Suit)0, (Rank)4));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest18()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)7);
            Card tableCard2 = new Card((Suit)3, (Rank)4);
            Card tableCard3 = new Card((Suit)2, (Rank)7);
            Card tableCard4 = new Card((Suit)0, (Rank)7);
            Card tableCard5 = new Card((Suit)1, (Rank)5);

            player1Cards.Add(new Card((Suit)1, (Rank)13));
            player1Cards.Add(new Card((Suit)3, (Rank)6));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)10));
            player2Cards.Add(new Card((Suit)2, (Rank)3));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest19()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)12);
            Card tableCard2 = new Card((Suit)0, (Rank)7);
            Card tableCard3 = new Card((Suit)3, (Rank)3);
            Card tableCard4 = new Card((Suit)2, (Rank)13);
            Card tableCard5 = new Card((Suit)3, (Rank)14);

            player1Cards.Add(new Card((Suit)1, (Rank)8));
            player1Cards.Add(new Card((Suit)1, (Rank)6));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)6));
            player2Cards.Add(new Card((Suit)3, (Rank)10));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest20()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)10);
            Card tableCard2 = new Card((Suit)0, (Rank)9);
            Card tableCard3 = new Card((Suit)2, (Rank)2);
            Card tableCard4 = new Card((Suit)1, (Rank)5);
            Card tableCard5 = new Card((Suit)0, (Rank)5);

            player1Cards.Add(new Card((Suit)3, (Rank)7));
            player1Cards.Add(new Card((Suit)3, (Rank)12));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)4));
            player2Cards.Add(new Card((Suit)1, (Rank)11));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest21()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)7);
            Card tableCard2 = new Card((Suit)1, (Rank)4);
            Card tableCard3 = new Card((Suit)1, (Rank)13);
            Card tableCard4 = new Card((Suit)3, (Rank)10);
            Card tableCard5 = new Card((Suit)1, (Rank)3);

            player1Cards.Add(new Card((Suit)2, (Rank)12));
            player1Cards.Add(new Card((Suit)2, (Rank)2));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)7));
            player2Cards.Add(new Card((Suit)0, (Rank)4));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest22()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)4);
            Card tableCard2 = new Card((Suit)0, (Rank)4);
            Card tableCard3 = new Card((Suit)2, (Rank)10);
            Card tableCard4 = new Card((Suit)3, (Rank)9);
            Card tableCard5 = new Card((Suit)1, (Rank)9);

            player1Cards.Add(new Card((Suit)2, (Rank)6));
            player1Cards.Add(new Card((Suit)1, (Rank)7));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)13));
            player2Cards.Add(new Card((Suit)2, (Rank)12));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest23()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)4);
            Card tableCard2 = new Card((Suit)2, (Rank)2);
            Card tableCard3 = new Card((Suit)3, (Rank)5);
            Card tableCard4 = new Card((Suit)1, (Rank)13);
            Card tableCard5 = new Card((Suit)1, (Rank)9);

            player1Cards.Add(new Card((Suit)1, (Rank)6));
            player1Cards.Add(new Card((Suit)2, (Rank)4));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)14));
            player2Cards.Add(new Card((Suit)2, (Rank)13));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest24()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)5);
            Card tableCard2 = new Card((Suit)0, (Rank)10);
            Card tableCard3 = new Card((Suit)1, (Rank)6);
            Card tableCard4 = new Card((Suit)0, (Rank)4);
            Card tableCard5 = new Card((Suit)1, (Rank)8);

            player1Cards.Add(new Card((Suit)1, (Rank)4));
            player1Cards.Add(new Card((Suit)0, (Rank)9));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)12));
            player2Cards.Add(new Card((Suit)0, (Rank)11));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest25()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)9);
            Card tableCard2 = new Card((Suit)3, (Rank)7);
            Card tableCard3 = new Card((Suit)2, (Rank)3);
            Card tableCard4 = new Card((Suit)1, (Rank)10);
            Card tableCard5 = new Card((Suit)1, (Rank)11);

            player1Cards.Add(new Card((Suit)2, (Rank)6));
            player1Cards.Add(new Card((Suit)3, (Rank)3));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)14));
            player2Cards.Add(new Card((Suit)1, (Rank)4));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest26()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)9);
            Card tableCard2 = new Card((Suit)2, (Rank)9);
            Card tableCard3 = new Card((Suit)2, (Rank)4);
            Card tableCard4 = new Card((Suit)1, (Rank)4);
            Card tableCard5 = new Card((Suit)2, (Rank)5);

            player1Cards.Add(new Card((Suit)1, (Rank)14));
            player1Cards.Add(new Card((Suit)2, (Rank)11));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)10));
            player2Cards.Add(new Card((Suit)2, (Rank)3));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest27()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)2);
            Card tableCard2 = new Card((Suit)1, (Rank)2);
            Card tableCard3 = new Card((Suit)1, (Rank)6);
            Card tableCard4 = new Card((Suit)0, (Rank)4);
            Card tableCard5 = new Card((Suit)2, (Rank)4);

            player1Cards.Add(new Card((Suit)1, (Rank)4));
            player1Cards.Add(new Card((Suit)2, (Rank)14));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)10));
            player2Cards.Add(new Card((Suit)2, (Rank)8));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest28()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)8);
            Card tableCard2 = new Card((Suit)3, (Rank)7);
            Card tableCard3 = new Card((Suit)3, (Rank)4);
            Card tableCard4 = new Card((Suit)2, (Rank)4);
            Card tableCard5 = new Card((Suit)2, (Rank)7);

            player1Cards.Add(new Card((Suit)0, (Rank)5));
            player1Cards.Add(new Card((Suit)3, (Rank)8));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)6));
            player2Cards.Add(new Card((Suit)3, (Rank)3));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest29()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)12);
            Card tableCard2 = new Card((Suit)0, (Rank)7);
            Card tableCard3 = new Card((Suit)2, (Rank)13);
            Card tableCard4 = new Card((Suit)2, (Rank)5);
            Card tableCard5 = new Card((Suit)1, (Rank)7);

            player1Cards.Add(new Card((Suit)0, (Rank)10));
            player1Cards.Add(new Card((Suit)1, (Rank)6));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)12));
            player2Cards.Add(new Card((Suit)3, (Rank)14));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest30()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)9);
            Card tableCard2 = new Card((Suit)2, (Rank)14);
            Card tableCard3 = new Card((Suit)3, (Rank)8);
            Card tableCard4 = new Card((Suit)3, (Rank)4);
            Card tableCard5 = new Card((Suit)0, (Rank)5);

            player1Cards.Add(new Card((Suit)1, (Rank)4));
            player1Cards.Add(new Card((Suit)0, (Rank)9));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)10));
            player2Cards.Add(new Card((Suit)3, (Rank)13));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest31()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)8);
            Card tableCard2 = new Card((Suit)1, (Rank)3);
            Card tableCard3 = new Card((Suit)0, (Rank)9);
            Card tableCard4 = new Card((Suit)1, (Rank)7);
            Card tableCard5 = new Card((Suit)3, (Rank)2);

            player1Cards.Add(new Card((Suit)3, (Rank)11));
            player1Cards.Add(new Card((Suit)3, (Rank)7));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)5));
            player2Cards.Add(new Card((Suit)2, (Rank)13));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest32()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)12);
            Card tableCard2 = new Card((Suit)1, (Rank)11);
            Card tableCard3 = new Card((Suit)1, (Rank)3);
            Card tableCard4 = new Card((Suit)3, (Rank)10);
            Card tableCard5 = new Card((Suit)0, (Rank)12);

            player1Cards.Add(new Card((Suit)2, (Rank)4));
            player1Cards.Add(new Card((Suit)0, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)9));
            player2Cards.Add(new Card((Suit)1, (Rank)6));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest33()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)13);
            Card tableCard2 = new Card((Suit)1, (Rank)3);
            Card tableCard3 = new Card((Suit)3, (Rank)10);
            Card tableCard4 = new Card((Suit)3, (Rank)9);
            Card tableCard5 = new Card((Suit)0, (Rank)13);

            player1Cards.Add(new Card((Suit)2, (Rank)7));
            player1Cards.Add(new Card((Suit)2, (Rank)3));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)14));
            player2Cards.Add(new Card((Suit)3, (Rank)5));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest34()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)10);
            Card tableCard2 = new Card((Suit)1, (Rank)9);
            Card tableCard3 = new Card((Suit)2, (Rank)6);
            Card tableCard4 = new Card((Suit)3, (Rank)6);
            Card tableCard5 = new Card((Suit)2, (Rank)8);

            player1Cards.Add(new Card((Suit)1, (Rank)7));
            player1Cards.Add(new Card((Suit)1, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)4));
            player2Cards.Add(new Card((Suit)1, (Rank)13));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest35()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)4);
            Card tableCard2 = new Card((Suit)2, (Rank)6);
            Card tableCard3 = new Card((Suit)3, (Rank)9);
            Card tableCard4 = new Card((Suit)2, (Rank)13);
            Card tableCard5 = new Card((Suit)2, (Rank)5);

            player1Cards.Add(new Card((Suit)3, (Rank)5));
            player1Cards.Add(new Card((Suit)0, (Rank)2));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)12));
            player2Cards.Add(new Card((Suit)1, (Rank)6));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest36()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)8);
            Card tableCard2 = new Card((Suit)1, (Rank)2);
            Card tableCard3 = new Card((Suit)1, (Rank)4);
            Card tableCard4 = new Card((Suit)3, (Rank)11);
            Card tableCard5 = new Card((Suit)1, (Rank)6);

            player1Cards.Add(new Card((Suit)1, (Rank)7));
            player1Cards.Add(new Card((Suit)3, (Rank)12));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)14));
            player2Cards.Add(new Card((Suit)0, (Rank)12));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest37()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)11);
            Card tableCard2 = new Card((Suit)0, (Rank)8);
            Card tableCard3 = new Card((Suit)3, (Rank)6);
            Card tableCard4 = new Card((Suit)1, (Rank)14);
            Card tableCard5 = new Card((Suit)2, (Rank)8);

            player1Cards.Add(new Card((Suit)3, (Rank)13));
            player1Cards.Add(new Card((Suit)2, (Rank)6));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)10));
            player2Cards.Add(new Card((Suit)3, (Rank)8));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest38()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)8);
            Card tableCard2 = new Card((Suit)3, (Rank)8);
            Card tableCard3 = new Card((Suit)2, (Rank)7);
            Card tableCard4 = new Card((Suit)2, (Rank)12);
            Card tableCard5 = new Card((Suit)3, (Rank)11);

            player1Cards.Add(new Card((Suit)0, (Rank)2));
            player1Cards.Add(new Card((Suit)3, (Rank)13));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)2));
            player2Cards.Add(new Card((Suit)1, (Rank)5));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest39()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)14);
            Card tableCard2 = new Card((Suit)3, (Rank)12);
            Card tableCard3 = new Card((Suit)3, (Rank)3);
            Card tableCard4 = new Card((Suit)1, (Rank)9);
            Card tableCard5 = new Card((Suit)2, (Rank)4);

            player1Cards.Add(new Card((Suit)1, (Rank)2));
            player1Cards.Add(new Card((Suit)0, (Rank)5));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)2));
            player2Cards.Add(new Card((Suit)2, (Rank)3));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest40()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)2);
            Card tableCard2 = new Card((Suit)0, (Rank)5);
            Card tableCard3 = new Card((Suit)0, (Rank)10);
            Card tableCard4 = new Card((Suit)3, (Rank)13);
            Card tableCard5 = new Card((Suit)2, (Rank)10);

            player1Cards.Add(new Card((Suit)3, (Rank)2));
            player1Cards.Add(new Card((Suit)3, (Rank)9));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)7));
            player2Cards.Add(new Card((Suit)0, (Rank)4));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest41()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)14);
            Card tableCard2 = new Card((Suit)1, (Rank)12);
            Card tableCard3 = new Card((Suit)0, (Rank)8);
            Card tableCard4 = new Card((Suit)3, (Rank)14);
            Card tableCard5 = new Card((Suit)2, (Rank)11);

            player1Cards.Add(new Card((Suit)3, (Rank)9));
            player1Cards.Add(new Card((Suit)3, (Rank)12));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)14));
            player2Cards.Add(new Card((Suit)2, (Rank)12));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest42()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)14);
            Card tableCard2 = new Card((Suit)3, (Rank)12);
            Card tableCard3 = new Card((Suit)1, (Rank)8);
            Card tableCard4 = new Card((Suit)1, (Rank)2);
            Card tableCard5 = new Card((Suit)3, (Rank)11);

            player1Cards.Add(new Card((Suit)2, (Rank)10));
            player1Cards.Add(new Card((Suit)0, (Rank)2));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)8));
            player2Cards.Add(new Card((Suit)3, (Rank)4));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest43()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)4);
            Card tableCard2 = new Card((Suit)2, (Rank)12);
            Card tableCard3 = new Card((Suit)3, (Rank)4);
            Card tableCard4 = new Card((Suit)2, (Rank)2);
            Card tableCard5 = new Card((Suit)2, (Rank)10);

            player1Cards.Add(new Card((Suit)3, (Rank)13));
            player1Cards.Add(new Card((Suit)1, (Rank)7));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)7));
            player2Cards.Add(new Card((Suit)0, (Rank)7));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest44()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)12);
            Card tableCard2 = new Card((Suit)2, (Rank)4);
            Card tableCard3 = new Card((Suit)3, (Rank)6);
            Card tableCard4 = new Card((Suit)2, (Rank)2);
            Card tableCard5 = new Card((Suit)3, (Rank)2);

            player1Cards.Add(new Card((Suit)2, (Rank)6));
            player1Cards.Add(new Card((Suit)0, (Rank)11));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)12));
            player2Cards.Add(new Card((Suit)1, (Rank)5));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest45()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)14);
            Card tableCard2 = new Card((Suit)3, (Rank)2);
            Card tableCard3 = new Card((Suit)1, (Rank)7);
            Card tableCard4 = new Card((Suit)0, (Rank)10);
            Card tableCard5 = new Card((Suit)1, (Rank)13);

            player1Cards.Add(new Card((Suit)3, (Rank)11));
            player1Cards.Add(new Card((Suit)2, (Rank)14));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)6));
            player2Cards.Add(new Card((Suit)3, (Rank)4));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest46()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)3);
            Card tableCard2 = new Card((Suit)0, (Rank)11);
            Card tableCard3 = new Card((Suit)0, (Rank)14);
            Card tableCard4 = new Card((Suit)3, (Rank)4);
            Card tableCard5 = new Card((Suit)3, (Rank)2);

            player1Cards.Add(new Card((Suit)3, (Rank)11));
            player1Cards.Add(new Card((Suit)2, (Rank)13));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)6));
            player2Cards.Add(new Card((Suit)1, (Rank)5));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest47()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)3);
            Card tableCard2 = new Card((Suit)2, (Rank)3);
            Card tableCard3 = new Card((Suit)3, (Rank)13);
            Card tableCard4 = new Card((Suit)3, (Rank)3);
            Card tableCard5 = new Card((Suit)0, (Rank)8);

            player1Cards.Add(new Card((Suit)3, (Rank)12));
            player1Cards.Add(new Card((Suit)0, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)9));
            player2Cards.Add(new Card((Suit)0, (Rank)11));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest48()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)11);
            Card tableCard2 = new Card((Suit)1, (Rank)2);
            Card tableCard3 = new Card((Suit)0, (Rank)4);
            Card tableCard4 = new Card((Suit)0, (Rank)8);
            Card tableCard5 = new Card((Suit)2, (Rank)12);

            player1Cards.Add(new Card((Suit)0, (Rank)10));
            player1Cards.Add(new Card((Suit)2, (Rank)11));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)5));
            player2Cards.Add(new Card((Suit)2, (Rank)2));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest49()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)10);
            Card tableCard2 = new Card((Suit)2, (Rank)11);
            Card tableCard3 = new Card((Suit)1, (Rank)4);
            Card tableCard4 = new Card((Suit)0, (Rank)12);
            Card tableCard5 = new Card((Suit)3, (Rank)9);

            player1Cards.Add(new Card((Suit)3, (Rank)4));
            player1Cards.Add(new Card((Suit)3, (Rank)8));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)13));
            player2Cards.Add(new Card((Suit)0, (Rank)14));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest50()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)9);
            Card tableCard2 = new Card((Suit)1, (Rank)14);
            Card tableCard3 = new Card((Suit)1, (Rank)9);
            Card tableCard4 = new Card((Suit)0, (Rank)2);
            Card tableCard5 = new Card((Suit)0, (Rank)6);

            player1Cards.Add(new Card((Suit)2, (Rank)5));
            player1Cards.Add(new Card((Suit)0, (Rank)3));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)14));
            player2Cards.Add(new Card((Suit)0, (Rank)4));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest51()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)5);
            Card tableCard2 = new Card((Suit)0, (Rank)6);
            Card tableCard3 = new Card((Suit)3, (Rank)12);
            Card tableCard4 = new Card((Suit)0, (Rank)5);
            Card tableCard5 = new Card((Suit)0, (Rank)4);

            player1Cards.Add(new Card((Suit)0, (Rank)12));
            player1Cards.Add(new Card((Suit)2, (Rank)9));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)12));
            player2Cards.Add(new Card((Suit)1, (Rank)2));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest52()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)4);
            Card tableCard2 = new Card((Suit)0, (Rank)7);
            Card tableCard3 = new Card((Suit)3, (Rank)13);
            Card tableCard4 = new Card((Suit)0, (Rank)3);
            Card tableCard5 = new Card((Suit)1, (Rank)9);

            player1Cards.Add(new Card((Suit)0, (Rank)14));
            player1Cards.Add(new Card((Suit)2, (Rank)11));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)9));
            player2Cards.Add(new Card((Suit)1, (Rank)11));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest53()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)10);
            Card tableCard2 = new Card((Suit)1, (Rank)13);
            Card tableCard3 = new Card((Suit)1, (Rank)7);
            Card tableCard4 = new Card((Suit)1, (Rank)3);
            Card tableCard5 = new Card((Suit)3, (Rank)2);

            player1Cards.Add(new Card((Suit)1, (Rank)5));
            player1Cards.Add(new Card((Suit)2, (Rank)13));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)11));
            player2Cards.Add(new Card((Suit)0, (Rank)5));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest54()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)8);
            Card tableCard2 = new Card((Suit)3, (Rank)5);
            Card tableCard3 = new Card((Suit)3, (Rank)4);
            Card tableCard4 = new Card((Suit)3, (Rank)11);
            Card tableCard5 = new Card((Suit)0, (Rank)5);

            player1Cards.Add(new Card((Suit)0, (Rank)4));
            player1Cards.Add(new Card((Suit)0, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)2));
            player2Cards.Add(new Card((Suit)0, (Rank)6));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest55()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)14);
            Card tableCard2 = new Card((Suit)3, (Rank)8);
            Card tableCard3 = new Card((Suit)0, (Rank)3);
            Card tableCard4 = new Card((Suit)2, (Rank)2);
            Card tableCard5 = new Card((Suit)0, (Rank)12);

            player1Cards.Add(new Card((Suit)1, (Rank)2));
            player1Cards.Add(new Card((Suit)0, (Rank)9));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)7));
            player2Cards.Add(new Card((Suit)0, (Rank)4));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest56()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)3);
            Card tableCard2 = new Card((Suit)0, (Rank)6);
            Card tableCard3 = new Card((Suit)1, (Rank)13);
            Card tableCard4 = new Card((Suit)3, (Rank)10);
            Card tableCard5 = new Card((Suit)1, (Rank)10);

            player1Cards.Add(new Card((Suit)0, (Rank)12));
            player1Cards.Add(new Card((Suit)3, (Rank)4));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)7));
            player2Cards.Add(new Card((Suit)2, (Rank)2));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest57()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)13);
            Card tableCard2 = new Card((Suit)2, (Rank)5);
            Card tableCard3 = new Card((Suit)3, (Rank)10);
            Card tableCard4 = new Card((Suit)2, (Rank)11);
            Card tableCard5 = new Card((Suit)0, (Rank)6);

            player1Cards.Add(new Card((Suit)3, (Rank)5));
            player1Cards.Add(new Card((Suit)2, (Rank)9));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)12));
            player2Cards.Add(new Card((Suit)3, (Rank)3));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest58()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)2);
            Card tableCard2 = new Card((Suit)0, (Rank)12);
            Card tableCard3 = new Card((Suit)3, (Rank)5);
            Card tableCard4 = new Card((Suit)1, (Rank)8);
            Card tableCard5 = new Card((Suit)0, (Rank)8);

            player1Cards.Add(new Card((Suit)1, (Rank)13));
            player1Cards.Add(new Card((Suit)2, (Rank)7));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)10));
            player2Cards.Add(new Card((Suit)3, (Rank)11));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest59()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)9);
            Card tableCard2 = new Card((Suit)2, (Rank)12);
            Card tableCard3 = new Card((Suit)1, (Rank)4);
            Card tableCard4 = new Card((Suit)3, (Rank)8);
            Card tableCard5 = new Card((Suit)2, (Rank)2);

            player1Cards.Add(new Card((Suit)2, (Rank)4));
            player1Cards.Add(new Card((Suit)2, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)5));
            player2Cards.Add(new Card((Suit)1, (Rank)6));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest60()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)5);
            Card tableCard2 = new Card((Suit)1, (Rank)11);
            Card tableCard3 = new Card((Suit)0, (Rank)13);
            Card tableCard4 = new Card((Suit)3, (Rank)13);
            Card tableCard5 = new Card((Suit)1, (Rank)8);

            player1Cards.Add(new Card((Suit)2, (Rank)10));
            player1Cards.Add(new Card((Suit)2, (Rank)9));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)6));
            player2Cards.Add(new Card((Suit)1, (Rank)6));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest61()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)7);
            Card tableCard2 = new Card((Suit)1, (Rank)2);
            Card tableCard3 = new Card((Suit)1, (Rank)12);
            Card tableCard4 = new Card((Suit)2, (Rank)12);
            Card tableCard5 = new Card((Suit)2, (Rank)10);

            player1Cards.Add(new Card((Suit)1, (Rank)14));
            player1Cards.Add(new Card((Suit)2, (Rank)9));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)9));
            player2Cards.Add(new Card((Suit)0, (Rank)5));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest62()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)14);
            Card tableCard2 = new Card((Suit)0, (Rank)13);
            Card tableCard3 = new Card((Suit)0, (Rank)10);
            Card tableCard4 = new Card((Suit)2, (Rank)13);
            Card tableCard5 = new Card((Suit)2, (Rank)9);

            player1Cards.Add(new Card((Suit)0, (Rank)5));
            player1Cards.Add(new Card((Suit)0, (Rank)9));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)11));
            player2Cards.Add(new Card((Suit)1, (Rank)9));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest63()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)3);
            Card tableCard2 = new Card((Suit)2, (Rank)7);
            Card tableCard3 = new Card((Suit)0, (Rank)10);
            Card tableCard4 = new Card((Suit)3, (Rank)9);
            Card tableCard5 = new Card((Suit)1, (Rank)12);

            player1Cards.Add(new Card((Suit)3, (Rank)11));
            player1Cards.Add(new Card((Suit)1, (Rank)5));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)10));
            player2Cards.Add(new Card((Suit)2, (Rank)6));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest64()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)14);
            Card tableCard2 = new Card((Suit)2, (Rank)12);
            Card tableCard3 = new Card((Suit)0, (Rank)8);
            Card tableCard4 = new Card((Suit)2, (Rank)5);
            Card tableCard5 = new Card((Suit)3, (Rank)2);

            player1Cards.Add(new Card((Suit)3, (Rank)9));
            player1Cards.Add(new Card((Suit)2, (Rank)13));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)13));
            player2Cards.Add(new Card((Suit)2, (Rank)11));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest65()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)3);
            Card tableCard2 = new Card((Suit)3, (Rank)12);
            Card tableCard3 = new Card((Suit)1, (Rank)6);
            Card tableCard4 = new Card((Suit)3, (Rank)3);
            Card tableCard5 = new Card((Suit)2, (Rank)3);

            player1Cards.Add(new Card((Suit)1, (Rank)5));
            player1Cards.Add(new Card((Suit)0, (Rank)13));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)14));
            player2Cards.Add(new Card((Suit)1, (Rank)11));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest66()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)14);
            Card tableCard2 = new Card((Suit)2, (Rank)12);
            Card tableCard3 = new Card((Suit)3, (Rank)9);
            Card tableCard4 = new Card((Suit)3, (Rank)11);
            Card tableCard5 = new Card((Suit)1, (Rank)8);

            player1Cards.Add(new Card((Suit)2, (Rank)2));
            player1Cards.Add(new Card((Suit)3, (Rank)4));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)6));
            player2Cards.Add(new Card((Suit)1, (Rank)2));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(0, actual);
        }

        [TestMethod]
        public void FastWinCalcTest67()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)4);
            Card tableCard2 = new Card((Suit)1, (Rank)2);
            Card tableCard3 = new Card((Suit)2, (Rank)3);
            Card tableCard4 = new Card((Suit)0, (Rank)10);
            Card tableCard5 = new Card((Suit)2, (Rank)14);

            player1Cards.Add(new Card((Suit)3, (Rank)9));
            player1Cards.Add(new Card((Suit)1, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)11));
            player2Cards.Add(new Card((Suit)0, (Rank)12));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest68()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)7);
            Card tableCard2 = new Card((Suit)1, (Rank)13);
            Card tableCard3 = new Card((Suit)2, (Rank)14);
            Card tableCard4 = new Card((Suit)3, (Rank)5);
            Card tableCard5 = new Card((Suit)2, (Rank)2);

            player1Cards.Add(new Card((Suit)3, (Rank)4));
            player1Cards.Add(new Card((Suit)0, (Rank)3));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)12));
            player2Cards.Add(new Card((Suit)3, (Rank)12));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest69()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)4);
            Card tableCard2 = new Card((Suit)3, (Rank)4);
            Card tableCard3 = new Card((Suit)3, (Rank)14);
            Card tableCard4 = new Card((Suit)2, (Rank)14);
            Card tableCard5 = new Card((Suit)2, (Rank)9);

            player1Cards.Add(new Card((Suit)1, (Rank)5));
            player1Cards.Add(new Card((Suit)3, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)10));
            player2Cards.Add(new Card((Suit)2, (Rank)3));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(0, actual);
        }

        [TestMethod]
        public void FastWinCalcTest70()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)3);
            Card tableCard2 = new Card((Suit)2, (Rank)9);
            Card tableCard3 = new Card((Suit)3, (Rank)7);
            Card tableCard4 = new Card((Suit)1, (Rank)2);
            Card tableCard5 = new Card((Suit)3, (Rank)8);

            player1Cards.Add(new Card((Suit)2, (Rank)11));
            player1Cards.Add(new Card((Suit)0, (Rank)11));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)14));
            player2Cards.Add(new Card((Suit)2, (Rank)7));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest71()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)5);
            Card tableCard2 = new Card((Suit)2, (Rank)3);
            Card tableCard3 = new Card((Suit)0, (Rank)14);
            Card tableCard4 = new Card((Suit)1, (Rank)5);
            Card tableCard5 = new Card((Suit)0, (Rank)4);

            player1Cards.Add(new Card((Suit)1, (Rank)7));
            player1Cards.Add(new Card((Suit)2, (Rank)12));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)7));
            player2Cards.Add(new Card((Suit)2, (Rank)10));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest72()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)6);
            Card tableCard2 = new Card((Suit)1, (Rank)4);
            Card tableCard3 = new Card((Suit)2, (Rank)10);
            Card tableCard4 = new Card((Suit)1, (Rank)13);
            Card tableCard5 = new Card((Suit)2, (Rank)6);

            player1Cards.Add(new Card((Suit)0, (Rank)7));
            player1Cards.Add(new Card((Suit)0, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)9));
            player2Cards.Add(new Card((Suit)3, (Rank)5));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest73()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)5);
            Card tableCard2 = new Card((Suit)2, (Rank)8);
            Card tableCard3 = new Card((Suit)2, (Rank)10);
            Card tableCard4 = new Card((Suit)1, (Rank)11);
            Card tableCard5 = new Card((Suit)2, (Rank)5);

            player1Cards.Add(new Card((Suit)2, (Rank)9));
            player1Cards.Add(new Card((Suit)2, (Rank)6));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)13));
            player2Cards.Add(new Card((Suit)3, (Rank)6));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest74()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)12);
            Card tableCard2 = new Card((Suit)1, (Rank)10);
            Card tableCard3 = new Card((Suit)2, (Rank)10);
            Card tableCard4 = new Card((Suit)1, (Rank)9);
            Card tableCard5 = new Card((Suit)3, (Rank)6);

            player1Cards.Add(new Card((Suit)1, (Rank)12));
            player1Cards.Add(new Card((Suit)2, (Rank)2));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)11));
            player2Cards.Add(new Card((Suit)0, (Rank)2));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest75()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)14);
            Card tableCard2 = new Card((Suit)0, (Rank)13);
            Card tableCard3 = new Card((Suit)2, (Rank)8);
            Card tableCard4 = new Card((Suit)2, (Rank)9);
            Card tableCard5 = new Card((Suit)1, (Rank)12);

            player1Cards.Add(new Card((Suit)1, (Rank)8));
            player1Cards.Add(new Card((Suit)1, (Rank)4));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)12));
            player2Cards.Add(new Card((Suit)3, (Rank)4));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest76()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)13);
            Card tableCard2 = new Card((Suit)1, (Rank)10);
            Card tableCard3 = new Card((Suit)3, (Rank)7);
            Card tableCard4 = new Card((Suit)3, (Rank)10);
            Card tableCard5 = new Card((Suit)0, (Rank)14);

            player1Cards.Add(new Card((Suit)1, (Rank)4));
            player1Cards.Add(new Card((Suit)0, (Rank)9));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)8));
            player2Cards.Add(new Card((Suit)0, (Rank)11));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest77()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)2);
            Card tableCard2 = new Card((Suit)1, (Rank)9);
            Card tableCard3 = new Card((Suit)0, (Rank)12);
            Card tableCard4 = new Card((Suit)1, (Rank)13);
            Card tableCard5 = new Card((Suit)0, (Rank)11);

            player1Cards.Add(new Card((Suit)2, (Rank)13));
            player1Cards.Add(new Card((Suit)1, (Rank)14));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)11));
            player2Cards.Add(new Card((Suit)1, (Rank)3));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest78()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)6);
            Card tableCard2 = new Card((Suit)3, (Rank)6);
            Card tableCard3 = new Card((Suit)3, (Rank)4);
            Card tableCard4 = new Card((Suit)0, (Rank)2);
            Card tableCard5 = new Card((Suit)2, (Rank)13);

            player1Cards.Add(new Card((Suit)0, (Rank)8));
            player1Cards.Add(new Card((Suit)2, (Rank)4));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)3));
            player2Cards.Add(new Card((Suit)3, (Rank)9));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest79()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)12);
            Card tableCard2 = new Card((Suit)1, (Rank)9);
            Card tableCard3 = new Card((Suit)2, (Rank)7);
            Card tableCard4 = new Card((Suit)2, (Rank)11);
            Card tableCard5 = new Card((Suit)1, (Rank)4);

            player1Cards.Add(new Card((Suit)3, (Rank)5));
            player1Cards.Add(new Card((Suit)1, (Rank)13));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)7));
            player2Cards.Add(new Card((Suit)0, (Rank)12));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest80()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)4);
            Card tableCard2 = new Card((Suit)1, (Rank)9);
            Card tableCard3 = new Card((Suit)0, (Rank)5);
            Card tableCard4 = new Card((Suit)1, (Rank)11);
            Card tableCard5 = new Card((Suit)2, (Rank)10);

            player1Cards.Add(new Card((Suit)0, (Rank)13));
            player1Cards.Add(new Card((Suit)2, (Rank)14));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)3));
            player2Cards.Add(new Card((Suit)1, (Rank)3));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest81()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)7);
            Card tableCard2 = new Card((Suit)0, (Rank)3);
            Card tableCard3 = new Card((Suit)0, (Rank)4);
            Card tableCard4 = new Card((Suit)1, (Rank)9);
            Card tableCard5 = new Card((Suit)1, (Rank)5);

            player1Cards.Add(new Card((Suit)1, (Rank)6));
            player1Cards.Add(new Card((Suit)3, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)2));
            player2Cards.Add(new Card((Suit)0, (Rank)10));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest82()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)8);
            Card tableCard2 = new Card((Suit)0, (Rank)14);
            Card tableCard3 = new Card((Suit)0, (Rank)9);
            Card tableCard4 = new Card((Suit)1, (Rank)5);
            Card tableCard5 = new Card((Suit)0, (Rank)4);

            player1Cards.Add(new Card((Suit)2, (Rank)8));
            player1Cards.Add(new Card((Suit)2, (Rank)13));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)7));
            player2Cards.Add(new Card((Suit)0, (Rank)10));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest83()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)14);
            Card tableCard2 = new Card((Suit)1, (Rank)5);
            Card tableCard3 = new Card((Suit)1, (Rank)8);
            Card tableCard4 = new Card((Suit)3, (Rank)10);
            Card tableCard5 = new Card((Suit)1, (Rank)14);

            player1Cards.Add(new Card((Suit)0, (Rank)8));
            player1Cards.Add(new Card((Suit)2, (Rank)4));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)3));
            player2Cards.Add(new Card((Suit)2, (Rank)9));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest84()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)12);
            Card tableCard2 = new Card((Suit)0, (Rank)8);
            Card tableCard3 = new Card((Suit)2, (Rank)11);
            Card tableCard4 = new Card((Suit)3, (Rank)9);
            Card tableCard5 = new Card((Suit)0, (Rank)5);

            player1Cards.Add(new Card((Suit)1, (Rank)4));
            player1Cards.Add(new Card((Suit)1, (Rank)6));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)6));
            player2Cards.Add(new Card((Suit)1, (Rank)11));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest85()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)4);
            Card tableCard2 = new Card((Suit)0, (Rank)8);
            Card tableCard3 = new Card((Suit)2, (Rank)2);
            Card tableCard4 = new Card((Suit)1, (Rank)13);
            Card tableCard5 = new Card((Suit)0, (Rank)7);

            player1Cards.Add(new Card((Suit)0, (Rank)12));
            player1Cards.Add(new Card((Suit)2, (Rank)4));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)9));
            player2Cards.Add(new Card((Suit)0, (Rank)10));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest86()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)6);
            Card tableCard2 = new Card((Suit)1, (Rank)5);
            Card tableCard3 = new Card((Suit)2, (Rank)4);
            Card tableCard4 = new Card((Suit)1, (Rank)2);
            Card tableCard5 = new Card((Suit)2, (Rank)5);

            player1Cards.Add(new Card((Suit)3, (Rank)13));
            player1Cards.Add(new Card((Suit)3, (Rank)2));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)5));
            player2Cards.Add(new Card((Suit)1, (Rank)11));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest87()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)7);
            Card tableCard2 = new Card((Suit)1, (Rank)7);
            Card tableCard3 = new Card((Suit)2, (Rank)3);
            Card tableCard4 = new Card((Suit)1, (Rank)2);
            Card tableCard5 = new Card((Suit)3, (Rank)8);

            player1Cards.Add(new Card((Suit)1, (Rank)12));
            player1Cards.Add(new Card((Suit)0, (Rank)12));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)10));
            player2Cards.Add(new Card((Suit)2, (Rank)2));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest88()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)5);
            Card tableCard2 = new Card((Suit)1, (Rank)10);
            Card tableCard3 = new Card((Suit)3, (Rank)10);
            Card tableCard4 = new Card((Suit)3, (Rank)11);
            Card tableCard5 = new Card((Suit)0, (Rank)11);

            player1Cards.Add(new Card((Suit)3, (Rank)7));
            player1Cards.Add(new Card((Suit)1, (Rank)8));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)12));
            player2Cards.Add(new Card((Suit)3, (Rank)4));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest89()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)5);
            Card tableCard2 = new Card((Suit)2, (Rank)14);
            Card tableCard3 = new Card((Suit)1, (Rank)6);
            Card tableCard4 = new Card((Suit)3, (Rank)8);
            Card tableCard5 = new Card((Suit)3, (Rank)10);

            player1Cards.Add(new Card((Suit)2, (Rank)8));
            player1Cards.Add(new Card((Suit)3, (Rank)12));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)5));
            player2Cards.Add(new Card((Suit)3, (Rank)7));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest90()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)12);
            Card tableCard2 = new Card((Suit)3, (Rank)10);
            Card tableCard3 = new Card((Suit)0, (Rank)14);
            Card tableCard4 = new Card((Suit)3, (Rank)3);
            Card tableCard5 = new Card((Suit)0, (Rank)4);

            player1Cards.Add(new Card((Suit)2, (Rank)4));
            player1Cards.Add(new Card((Suit)1, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)6));
            player2Cards.Add(new Card((Suit)1, (Rank)12));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest91()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)14);
            Card tableCard2 = new Card((Suit)1, (Rank)2);
            Card tableCard3 = new Card((Suit)1, (Rank)11);
            Card tableCard4 = new Card((Suit)0, (Rank)10);
            Card tableCard5 = new Card((Suit)1, (Rank)10);

            player1Cards.Add(new Card((Suit)2, (Rank)3));
            player1Cards.Add(new Card((Suit)0, (Rank)7));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)9));
            player2Cards.Add(new Card((Suit)3, (Rank)5));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest92()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)13);
            Card tableCard2 = new Card((Suit)3, (Rank)7);
            Card tableCard3 = new Card((Suit)3, (Rank)12);
            Card tableCard4 = new Card((Suit)2, (Rank)8);
            Card tableCard5 = new Card((Suit)1, (Rank)12);

            player1Cards.Add(new Card((Suit)0, (Rank)8));
            player1Cards.Add(new Card((Suit)1, (Rank)4));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)10));
            player2Cards.Add(new Card((Suit)0, (Rank)4));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest93()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)4);
            Card tableCard2 = new Card((Suit)3, (Rank)6);
            Card tableCard3 = new Card((Suit)3, (Rank)14);
            Card tableCard4 = new Card((Suit)0, (Rank)14);
            Card tableCard5 = new Card((Suit)1, (Rank)10);

            player1Cards.Add(new Card((Suit)1, (Rank)8));
            player1Cards.Add(new Card((Suit)2, (Rank)2));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)11));
            player2Cards.Add(new Card((Suit)2, (Rank)10));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest94()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)7);
            Card tableCard2 = new Card((Suit)2, (Rank)13);
            Card tableCard3 = new Card((Suit)1, (Rank)7);
            Card tableCard4 = new Card((Suit)0, (Rank)5);
            Card tableCard5 = new Card((Suit)2, (Rank)7);

            player1Cards.Add(new Card((Suit)0, (Rank)11));
            player1Cards.Add(new Card((Suit)3, (Rank)14));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)8));
            player2Cards.Add(new Card((Suit)0, (Rank)12));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest95()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)8);
            Card tableCard2 = new Card((Suit)1, (Rank)14);
            Card tableCard3 = new Card((Suit)1, (Rank)2);
            Card tableCard4 = new Card((Suit)2, (Rank)11);
            Card tableCard5 = new Card((Suit)0, (Rank)6);

            player1Cards.Add(new Card((Suit)0, (Rank)4));
            player1Cards.Add(new Card((Suit)1, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)10));
            player2Cards.Add(new Card((Suit)2, (Rank)8));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest96()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)14);
            Card tableCard2 = new Card((Suit)0, (Rank)8);
            Card tableCard3 = new Card((Suit)3, (Rank)5);
            Card tableCard4 = new Card((Suit)1, (Rank)7);
            Card tableCard5 = new Card((Suit)2, (Rank)4);

            player1Cards.Add(new Card((Suit)2, (Rank)12));
            player1Cards.Add(new Card((Suit)0, (Rank)14));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)2));
            player2Cards.Add(new Card((Suit)3, (Rank)2));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest97()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)2);
            Card tableCard2 = new Card((Suit)3, (Rank)8);
            Card tableCard3 = new Card((Suit)2, (Rank)5);
            Card tableCard4 = new Card((Suit)3, (Rank)10);
            Card tableCard5 = new Card((Suit)1, (Rank)12);

            player1Cards.Add(new Card((Suit)0, (Rank)12));
            player1Cards.Add(new Card((Suit)2, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)13));
            player2Cards.Add(new Card((Suit)1, (Rank)3));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest98()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)3);
            Card tableCard2 = new Card((Suit)3, (Rank)12);
            Card tableCard3 = new Card((Suit)3, (Rank)9);
            Card tableCard4 = new Card((Suit)0, (Rank)11);
            Card tableCard5 = new Card((Suit)0, (Rank)14);

            player1Cards.Add(new Card((Suit)0, (Rank)7));
            player1Cards.Add(new Card((Suit)2, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)8));
            player2Cards.Add(new Card((Suit)1, (Rank)9));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest99()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)11);
            Card tableCard2 = new Card((Suit)2, (Rank)7);
            Card tableCard3 = new Card((Suit)3, (Rank)5);
            Card tableCard4 = new Card((Suit)2, (Rank)12);
            Card tableCard5 = new Card((Suit)1, (Rank)2);

            player1Cards.Add(new Card((Suit)0, (Rank)2));
            player1Cards.Add(new Card((Suit)2, (Rank)5));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)12));
            player2Cards.Add(new Card((Suit)1, (Rank)14));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest100()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)7);
            Card tableCard2 = new Card((Suit)3, (Rank)3);
            Card tableCard3 = new Card((Suit)1, (Rank)8);
            Card tableCard4 = new Card((Suit)1, (Rank)4);
            Card tableCard5 = new Card((Suit)0, (Rank)5);

            player1Cards.Add(new Card((Suit)1, (Rank)11));
            player1Cards.Add(new Card((Suit)3, (Rank)13));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)10));
            player2Cards.Add(new Card((Suit)2, (Rank)3));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest101()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)7);
            Card tableCard2 = new Card((Suit)3, (Rank)12);
            Card tableCard3 = new Card((Suit)1, (Rank)8);
            Card tableCard4 = new Card((Suit)0, (Rank)8);
            Card tableCard5 = new Card((Suit)2, (Rank)2);

            player1Cards.Add(new Card((Suit)0, (Rank)3));
            player1Cards.Add(new Card((Suit)2, (Rank)3));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)6));
            player2Cards.Add(new Card((Suit)3, (Rank)4));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest102()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)6);
            Card tableCard2 = new Card((Suit)1, (Rank)6);
            Card tableCard3 = new Card((Suit)3, (Rank)9);
            Card tableCard4 = new Card((Suit)2, (Rank)3);
            Card tableCard5 = new Card((Suit)2, (Rank)2);

            player1Cards.Add(new Card((Suit)2, (Rank)7));
            player1Cards.Add(new Card((Suit)0, (Rank)10));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)13));
            player2Cards.Add(new Card((Suit)0, (Rank)2));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest103()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)12);
            Card tableCard2 = new Card((Suit)3, (Rank)3);
            Card tableCard3 = new Card((Suit)3, (Rank)9);
            Card tableCard4 = new Card((Suit)2, (Rank)7);
            Card tableCard5 = new Card((Suit)0, (Rank)12);

            player1Cards.Add(new Card((Suit)2, (Rank)9));
            player1Cards.Add(new Card((Suit)2, (Rank)8));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)4));
            player2Cards.Add(new Card((Suit)0, (Rank)2));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest104()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)3);
            Card tableCard2 = new Card((Suit)2, (Rank)6);
            Card tableCard3 = new Card((Suit)3, (Rank)11);
            Card tableCard4 = new Card((Suit)1, (Rank)4);
            Card tableCard5 = new Card((Suit)1, (Rank)14);

            player1Cards.Add(new Card((Suit)2, (Rank)4));
            player1Cards.Add(new Card((Suit)1, (Rank)9));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)7));
            player2Cards.Add(new Card((Suit)0, (Rank)6));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest105()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)10);
            Card tableCard2 = new Card((Suit)3, (Rank)4);
            Card tableCard3 = new Card((Suit)2, (Rank)14);
            Card tableCard4 = new Card((Suit)3, (Rank)11);
            Card tableCard5 = new Card((Suit)3, (Rank)2);

            player1Cards.Add(new Card((Suit)3, (Rank)10));
            player1Cards.Add(new Card((Suit)3, (Rank)13));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)6));
            player2Cards.Add(new Card((Suit)3, (Rank)8));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest106()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)10);
            Card tableCard2 = new Card((Suit)3, (Rank)9);
            Card tableCard3 = new Card((Suit)2, (Rank)3);
            Card tableCard4 = new Card((Suit)3, (Rank)6);
            Card tableCard5 = new Card((Suit)1, (Rank)8);

            player1Cards.Add(new Card((Suit)0, (Rank)4));
            player1Cards.Add(new Card((Suit)0, (Rank)3));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)4));
            player2Cards.Add(new Card((Suit)0, (Rank)5));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest107()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)9);
            Card tableCard2 = new Card((Suit)1, (Rank)9);
            Card tableCard3 = new Card((Suit)1, (Rank)8);
            Card tableCard4 = new Card((Suit)0, (Rank)6);
            Card tableCard5 = new Card((Suit)2, (Rank)5);

            player1Cards.Add(new Card((Suit)2, (Rank)13));
            player1Cards.Add(new Card((Suit)0, (Rank)9));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)2));
            player2Cards.Add(new Card((Suit)1, (Rank)10));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest108()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)5);
            Card tableCard2 = new Card((Suit)1, (Rank)13);
            Card tableCard3 = new Card((Suit)1, (Rank)14);
            Card tableCard4 = new Card((Suit)2, (Rank)6);
            Card tableCard5 = new Card((Suit)0, (Rank)9);

            player1Cards.Add(new Card((Suit)2, (Rank)4));
            player1Cards.Add(new Card((Suit)3, (Rank)12));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)7));
            player2Cards.Add(new Card((Suit)1, (Rank)10));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest109()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)2);
            Card tableCard2 = new Card((Suit)0, (Rank)3);
            Card tableCard3 = new Card((Suit)1, (Rank)7);
            Card tableCard4 = new Card((Suit)1, (Rank)9);
            Card tableCard5 = new Card((Suit)3, (Rank)5);

            player1Cards.Add(new Card((Suit)0, (Rank)11));
            player1Cards.Add(new Card((Suit)3, (Rank)9));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)7));
            player2Cards.Add(new Card((Suit)2, (Rank)14));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest110()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)12);
            Card tableCard2 = new Card((Suit)2, (Rank)12);
            Card tableCard3 = new Card((Suit)0, (Rank)13);
            Card tableCard4 = new Card((Suit)0, (Rank)4);
            Card tableCard5 = new Card((Suit)2, (Rank)10);

            player1Cards.Add(new Card((Suit)0, (Rank)9));
            player1Cards.Add(new Card((Suit)2, (Rank)13));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)14));
            player2Cards.Add(new Card((Suit)3, (Rank)4));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest111()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)8);
            Card tableCard2 = new Card((Suit)1, (Rank)10);
            Card tableCard3 = new Card((Suit)1, (Rank)13);
            Card tableCard4 = new Card((Suit)2, (Rank)12);
            Card tableCard5 = new Card((Suit)0, (Rank)12);

            player1Cards.Add(new Card((Suit)2, (Rank)10));
            player1Cards.Add(new Card((Suit)2, (Rank)9));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)4));
            player2Cards.Add(new Card((Suit)3, (Rank)14));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest112()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)14);
            Card tableCard2 = new Card((Suit)2, (Rank)6);
            Card tableCard3 = new Card((Suit)2, (Rank)10);
            Card tableCard4 = new Card((Suit)3, (Rank)13);
            Card tableCard5 = new Card((Suit)1, (Rank)3);

            player1Cards.Add(new Card((Suit)1, (Rank)9));
            player1Cards.Add(new Card((Suit)0, (Rank)14));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)4));
            player2Cards.Add(new Card((Suit)0, (Rank)6));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest113()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)13);
            Card tableCard2 = new Card((Suit)3, (Rank)9);
            Card tableCard3 = new Card((Suit)2, (Rank)4);
            Card tableCard4 = new Card((Suit)1, (Rank)5);
            Card tableCard5 = new Card((Suit)0, (Rank)5);

            player1Cards.Add(new Card((Suit)1, (Rank)13));
            player1Cards.Add(new Card((Suit)0, (Rank)11));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)1, (Rank)2));
            player2Cards.Add(new Card((Suit)2, (Rank)11));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest114()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)6);
            Card tableCard2 = new Card((Suit)3, (Rank)7);
            Card tableCard3 = new Card((Suit)1, (Rank)2);
            Card tableCard4 = new Card((Suit)2, (Rank)14);
            Card tableCard5 = new Card((Suit)2, (Rank)6);

            player1Cards.Add(new Card((Suit)3, (Rank)10));
            player1Cards.Add(new Card((Suit)0, (Rank)12));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)12));
            player2Cards.Add(new Card((Suit)3, (Rank)5));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest115()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)1, (Rank)3);
            Card tableCard2 = new Card((Suit)3, (Rank)2);
            Card tableCard3 = new Card((Suit)1, (Rank)4);
            Card tableCard4 = new Card((Suit)3, (Rank)14);
            Card tableCard5 = new Card((Suit)2, (Rank)5);

            player1Cards.Add(new Card((Suit)0, (Rank)10));
            player1Cards.Add(new Card((Suit)3, (Rank)13));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)9));
            player2Cards.Add(new Card((Suit)3, (Rank)4));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(0, actual);
        }

        [TestMethod]
        public void FastWinCalcTest116()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)3, (Rank)10);
            Card tableCard2 = new Card((Suit)3, (Rank)9);
            Card tableCard3 = new Card((Suit)3, (Rank)3);
            Card tableCard4 = new Card((Suit)2, (Rank)9);
            Card tableCard5 = new Card((Suit)0, (Rank)3);

            player1Cards.Add(new Card((Suit)1, (Rank)6));
            player1Cards.Add(new Card((Suit)2, (Rank)8));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)0, (Rank)11));
            player2Cards.Add(new Card((Suit)1, (Rank)11));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest117()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)0, (Rank)2);
            Card tableCard2 = new Card((Suit)2, (Rank)9);
            Card tableCard3 = new Card((Suit)1, (Rank)9);
            Card tableCard4 = new Card((Suit)2, (Rank)10);
            Card tableCard5 = new Card((Suit)2, (Rank)11);

            player1Cards.Add(new Card((Suit)1, (Rank)10));
            player1Cards.Add(new Card((Suit)0, (Rank)3));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)3, (Rank)12));
            player2Cards.Add(new Card((Suit)3, (Rank)7));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }

        [TestMethod]
        public void FastWinCalcTest118()
        {

            // Arrange
            List<Card> player1Cards = new List<Card>();
            List<Card> player2Cards = new List<Card>();

            Card tableCard1 = new Card((Suit)2, (Rank)10);
            Card tableCard2 = new Card((Suit)2, (Rank)13);
            Card tableCard3 = new Card((Suit)1, (Rank)14);
            Card tableCard4 = new Card((Suit)0, (Rank)6);
            Card tableCard5 = new Card((Suit)3, (Rank)9);

            player1Cards.Add(new Card((Suit)2, (Rank)9));
            player1Cards.Add(new Card((Suit)1, (Rank)6));
            player1Cards.Add(tableCard1);
            player1Cards.Add(tableCard2);
            player1Cards.Add(tableCard3);
            player1Cards.Add(tableCard4);
            player1Cards.Add(tableCard5);

            player2Cards.Add(new Card((Suit)2, (Rank)8));
            player2Cards.Add(new Card((Suit)1, (Rank)8));
            player2Cards.Add(tableCard1);
            player2Cards.Add(tableCard2);
            player2Cards.Add(tableCard3);
            player2Cards.Add(tableCard4);
            player2Cards.Add(tableCard5);

            //Act
            int actual = _winCalc.WhoWins(player1Cards, player2Cards);

            //Assert
            Assert.AreEqual(-1, actual);
        }
    }
}
